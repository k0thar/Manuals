## Table of Contents
1. Installing Python
2. Setting Up a Virtual Environment
3. Managing Python Packages
4. Running Python Scripts
5. Development Tools
6. Troubleshooting

## Installing Python

Void Linux offers multiple Python versions through its package manager.

### 1. Install Python (latest stable version):
```bash
sudo xbps-install python3
```

### 2. For specific Python versions:
```bash
sudo xbps-install python3.9  # Example for Python 3.9
```

### 3. Install pip (Python package manager):
```bash
sudo xbps-install python3-pip
```

### 4. Verify installation:
```bash
python3 --version
pip3 --version
```

## Setting Up a Virtual Environment

Virtual environments keep project dependencies isolated.

### 1. Create a virtual environment:
```bash
python3 -m venv /path/to/venv  # Example: ~/Documents/python/venv
```

### 2. Activate the virtual environment:
```bash
source /path/to/venv/bin/activate
```
(Your prompt should change to show the active environment)

### 3. Deactivate the virtual environment:
```bash
deactivate
```

## Managing Python Packages

### 1. Install packages with pip:
```bash
pip install package_name
```

### 2. Install specific version:
```bash
pip install package_name==1.2.3
```

### 3. List installed packages:
```bash
pip list
```

### 4. Save requirements to file:
```bash
pip freeze > requirements.txt
```

### 5. Install from requirements file:
```bash
pip install -r requirements.txt
```

## Running Python Scripts

### 1. Run a Python script:
```bash
python3 script.py
```

### 2. Run Python interactively:
```bash
python3
```

### 3. Run with virtual environment active:
```bash
source /path/to/venv/bin/activate
python script.py
```

## Development Tools

### 1. Install development tools:
```bash
sudo xbps-install python3-devel  # For building Python extensions
```

### 2. Recommended tools:
```bash
pip install ipython  # Enhanced interactive Python
pip install black   # Code formatter
pip install flake8  # Linter
```

### 3. For Jupyter Notebook:
```bash
pip install notebook
jupyter notebook
```

## Troubleshooting

### 1. If Python command doesn't work:
```bash
# Check what's installed
ls -l /usr/bin/python*

# Create symlink if needed (but better to use python3 explicitly)
sudo ln -s /usr/bin/python3 /usr/bin/python
```

### 2. If pip commands fail:
```bash
# Try with python3 -m pip
python3 -m pip install package_name
```

### 3. SSL errors when installing packages:
```bash
sudo xbps-install ca-certificates
```

### 4. Missing dependencies for building packages:
```bash
sudo xbps-install base-devel
```

### 5. Clean pip cache:
```bash
pip cache purge
```

Remember to always activate your virtual environment before working on Python projects to avoid conflicts between system and project-specific packages.
